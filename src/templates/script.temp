/**
 * Below line for code will save and update {{modelName}}
 */
let validator = $("#save{{modelName}}Form").validate({
    rules: {
        name: {
            required: true,
        },
        example: {
            required: true,
            //digits: true,
            //min: 1,
            //max: 1,
            //range: [1,7],
        },
    },
    errorElement: 'span',
    errorPlacement: function (error, element) {
      error.addClass('invalid-feedback');
      element.closest('.form-group').append(error);
    },
    highlight: function (element, errorClass, validClass) {
      $(element).addClass('is-invalid');
    },
    unhighlight: function (element, errorClass, validClass) {
      $(element).removeClass('is-invalid');
    },
    submitHandler: function () {
        $.ajax({
            type: 'POST',
            url: APP_URL + '{{Prefix}}{{modelNameLower}}/create',
            data: $('#save{{modelName}}Form').serialize(),
            success: function (response) {
                if(response.success){
                    $.Toast(window.I18n.trans(window.translations.message.success.success),response.message,'success');
                    $('#{{modelNameLower}}Model').modal('hide');
                    dataTable.draw('page');
                }else{
                    $.Toast(window.I18n.trans(window.translations.message.success.error),response.message,'error');
                }
            },
            error: function (errorData) {
                showErrorMessage(errorData,validator);
            }
        });
    }
});

/**
 * Below line for code will reset data
 */
$('#{{modelNameLower}}Model').on('hidden.bs.modal', function (e) {
    $('#save{{modelName}}Form').trigger('reset');
    validator.resetForm();
});

let dataTable = $('#{{modelNameLower}}Table').DataTable(dataTableInIt({
    "ajax": {
        "url": APP_URL +'{{Prefix}}{{modelNameLower}}/list',
        "type": "POST",
        "data": function (arg) {
          arg.name = $('#search').val();
          arg.status = $('#status').val();
        }
    },
    "columns": [{
                "data": "name",
                "name": "{{modelPluralSlug}}.name"
            },
            {
                "data": "status",
                "render": function (data, type, row) {
                    return `<div class="custom-control custom-switch">
                      <input type="checkbox" class="updateStatus custom-control-input" id="customSwitch${row.id}" ${(row.status==1)?'checked':''} value="${row.id}">
                      <label class="custom-control-label" for="customSwitch${row.id}"></label>
                    </div>`;
                }
            },
            {
                "defaultContent": "action",
                "render": function (data, type, row) {
                    return `<i class="fas fa-edit m-2 edit{{modelName}}" data-id="${row.id}"></i><i class="fas fa-trash m-2 delete{{modelName}}" data-id="${row.id}"></i>`;
                }
            }
        ],
    "columnDefs": [{
        'targets': [1,2],
        'orderable': false
    }],
    "order": [
        [0, "desc"]
    ]
})
);
/**
 * [updateStatus description]
 * @param  {[type]} arg [description]
 * @return {[type]}     [description]
 */
$(document).on('click','.updateStatus',function() {
    let status = true;
    $.ajax({
        url: APP_URL + '{{Prefix}}{{modelNameLower}}/change-status/'+$(this).val(),
        async : false,
        success : function(response){
            if (response.success) {
                $.Toast('Success',response.message,'success');
            }else{
                $.Toast('Error',response.message,'error');
            }
            status = response.success;
            dataTable.draw('page');
        },
        error: function(response){
            showErrorMessage(response);
        }
    });
    return status;
});
$(document).on('click', '.edit{{modelName}}', function(event) {
    $.ajax({
        url: APP_URL+'{{Prefix}}{{modelNameLower}}/'+$(this).data('id'),
        success : function(response){
            if (response.success) {
                $('#update{{modelName}}Form input[name=name]').val(response.data.name);
                $('#id').val(response.data.id);
                $('#{{modelNameLower}}EditModel').modal('show');
            }else{
                $.Toast('Error',response.message,'error');
            }
        },
        error : function(response){
            showErrorMessage(response);
        }
    });
    
});

let update_validator = $("#update{{modelName}}Form").validate({
    rules: {
        name: {
            required: true,
        }
    },
    errorElement: 'span',
    errorPlacement: function (error, element) {
      error.addClass('invalid-feedback');
      element.closest('.form-group').append(error);
    },
    highlight: function (element, errorClass, validClass) {
      $(element).addClass('is-invalid');
    },
    unhighlight: function (element, errorClass, validClass) {
      $(element).removeClass('is-invalid');
    },
    submitHandler: function () {
        $.ajax({
            type: 'POST',
            url: APP_URL + '{{Prefix}}{{modelNameLower}}/update',
            data: $('#update{{modelName}}Form').serialize(),
            success: function (response) {
                if (response.success) {
                    $.Toast(window.I18n.trans(window.translations.message.success.success),response.message,'success');
                    $('#{{modelNameLower}}EditModel').modal('hide');
                    dataTable.draw('page');
                }else{
                    $.Toast('Error',response.message,'error');
                }
            },
            error: function (errorData) {
                showErrorMessage(errorData,update_validator);
            }
        });
    }
});
/**
 * Below line for code will reset data
 */
$('#{{modelNameLower}}EditModel').on('hidden.bs.modal', function (e) {
    $('#update{{modelName}}Form')[0].reset();
    update_validator.resetForm();
});
/**
 * Below line for code will filter
 */
$('#search').keyup(function(event) {
    dataTable.draw('page');
});
$('#status').change(function(event) {
    dataTable.draw('page');
});
/**
 * Below line for code will delete data
 */
$(document).on('click', '.delete{{modelName}}', function(event) {
    Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
      if (result.isConfirmed) {
        $.ajax({
            url: APP_URL + '{{Prefix}}{{modelNameLower}}/'+$(this).data('id'),
            type: 'DELETE',
            success : function(response){
                if (response.success) {
                    $.Toast('Success',response.message,'success');
                    dataTable.draw('page');
                }else{
                    $.Toast('Error',response.message,'error');
                }
            },
            error : function(response){
                showErrorMessage(response);
            }
        });
      }
    })
});
/**
 * The following code for download PDF,Excel and CSV file
 */
$(document).on('click', '.file', function(event) {
    let columns = [];
    let header = ["id"];
    $("#fields input:checked").each(function(){
        columns.push($(this).val());
        header.push($(this).val());
    });
    var _this = $(this);
    $.ajax({
        url: APP_URL + '{{Prefix}}{{modelNameLower}}/download',
        type: 'POST',
        data: {
            checked: columns,
            file: $(this).data('id'),
            status: $('#status').val()
        },
        success: function(response){
            let data = [];
            data.push(header);
            if (_this.data('id') == 'pdf') {
                $.each(response,function(index, el) {
                    let array = [];
                    $.each(el,function(index2, el2) {
                        array.push(el2.toString());
                    });
                    data.push(array);
                });
                let doc = new jsPDF('p', 'pt', 'letter');
                doc.setFontSize(9);
                $.each(data, function (i, row){
                  $.each(row, function (j, cell){
                    if (j == 0) {
                        doc.cell(1, 10, 90, 20, cell, i);
                    }else{
                        doc.cell(10, 200, 200, 20, cell, i);
                    }
                  });
                })
                doc.save('{{modelNameLower}}.pdf');
            }else if(_this.data('id') == 'csv'){
                let blob = new Blob([response], { type: "text/csv;charset=utf-8;" });
                var link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                link.download = '{{modelNameLower}}.csv';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }else{
                let blob = new Blob([response], { type: "text/xlsx;charset=utf-8;" });
                var link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                link.download = '{{modelNameLower}}.xlsx';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    })
});
/**
 * Search event listener
 */
document.getElementById('search').addEventListener("search",function(){
    dataTable.draw('page');
});